name: Manual Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'devnet'
        type: choice
        options:
          - devnet
          - mainnet-beta

env:
  CARGO_TERM_COLOR: always
  SOLANA_VERSION: "1.18.22"
  ANCHOR_VERSION: "0.31.1"
  NODE_VERSION: "18"

jobs:
  build-check:
    name: Build Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install Solana CLI
      run: |
        sh -c "$(curl -sSfL https://release.solana.com/v${{ env.SOLANA_VERSION }}/install)"
        echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH

    - name: Install Anchor CLI
      run: npm install -g @coral-xyz/anchor-cli@${{ env.ANCHOR_VERSION }}

    - name: Build program
      run: |
        anchor build || {
          echo "Build failed"
          exit 1
        }

    - name: Check program size
      run: |
        if [ -f target/deploy/aura_lend.so ]; then
          PROGRAM_SIZE=$(stat -c%s target/deploy/aura_lend.so)
          echo "Program size: $PROGRAM_SIZE bytes"

          MAX_SIZE=1048576
          if [ "$PROGRAM_SIZE" -gt "$MAX_SIZE" ]; then
            echo "Warning: Program size exceeds 1MB"
          else
            echo "Program size OK"
          fi
        else
          echo "Program binary not found"
        fi
      continue-on-error: true

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: program-artifacts
        path: |
          target/deploy/aura_lend.so
          target/idl/aura_lend.json
          Anchor.toml
      if: success()

  validate:
    name: Validation
    runs-on: ubuntu-latest
    needs: [build-check]
    if: always()

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: program-artifacts
      continue-on-error: true

    - name: Program validation
      run: |
        echo "Target: ${{ github.event.inputs.environment }}"
        if [ -f target/deploy/aura_lend.so ]; then
          echo "Program binary found"
          HASH=$(sha256sum target/deploy/aura_lend.so | cut -d' ' -f1)
          echo "Program hash: $HASH"
        else
          echo "Program binary missing"
        fi
      continue-on-error: true